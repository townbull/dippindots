function cs(){ cd $1; ls -l;}

# This will export your GPG public and private keys
# Pass in the key ID (often just the username) of the
# key you want to export.
# You can see this with $ gpg -K
function exportKeys(){
	gpg --output pubkey.gpg --export $1
	gpg --output - --export-secret-key $1 | cat pubkey.gpg - | gpg --armor --output keys.asc --symmetric --cipher-algo AES256
	rm pubkey.gpg
	echo "Keys save as keys.asc"
}
# Import your GPG keys.
# Pass in your keys.asc file.
function importKeys() {
	gpg --no-use-agent --output - $1 | gpg --import
}

# The following are from Mathias Bynens' dotfiles
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
		sleep 1 && open "http://localhost:${port}/" &
# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
		local ip=$(ipconfig getifaddr en0)
		sleep 1 && open "http://${ip}:${port}/" &
		php -S "${ip}:${port}ip"
}

# Activate a Python virtualenv by name.
# Assumes that envs are stored in ~/env/.
function a() {
    source ~/env/$1/bin/activate
}

# Search on Google
function g() {
    open https://www.google.com/search?q="${1}"
}

# Quick scratchpad
function scratch() {
    vi /tmp/scratch
}
